# -*- coding: utf-8 -*-
# Generated by Django 1.10.6 on 2017-11-19 00:08
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import modelsViews.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=128, unique=True)),
                ('email', models.CharField(max_length=128, unique=True)),
                ('country', models.CharField(blank=True, max_length=64)),
                ('tagLine', models.CharField(blank=True, max_length=4000)),
                ('isBrand', models.NullBooleanField()),
                ('brandName', models.CharField(blank=True, max_length=256)),
                ('image', models.ImageField(blank=True, upload_to=modelsViews.models.scramble_uploaded_filename, verbose_name='Uploaded image')),
                ('webPage', models.CharField(blank=True, max_length=128)),
                ('thumbnail', models.ImageField(blank=True, upload_to='', verbose_name='Thumbnail of uploaded image')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': 'users',
                'verbose_name': 'user',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='banedSubstancesModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('referenceNumber', models.CharField(db_index=True, max_length=5, unique=True)),
                ('chemicalName', models.TextField(blank=True, null=True)),
                ('casNumber', models.TextField(blank=True, null=True)),
                ('ecNumber', models.TextField(blank=True, null=True)),
                ('regulation', models.TextField(blank=True, null=True)),
                ('regulatedBy', models.TextField(blank=True, null=True)),
                ('otherDirective', models.TextField(blank=True, null=True)),
                ('sccsOpinion', models.TextField(blank=True, null=True)),
                ('iupacName', models.TextField(blank=True, null=True)),
                ('ingredients', models.TextField(blank=True, null=True)),
                ('cmr', models.TextField(blank=True, null=True)),
                ('updateDate', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='colorantsModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('referenceNumber', models.CharField(db_index=True, max_length=5, unique=True)),
                ('chemicalName', models.TextField(blank=True, null=True)),
                ('colourIndex', models.TextField(blank=True, null=True)),
                ('casNumber', models.TextField(blank=True, null=True)),
                ('ecNumber', models.TextField(blank=True, null=True)),
                ('colour', models.TextField(blank=True, null=True)),
                ('productType', models.TextField(blank=True, null=True)),
                ('maxConcetration', models.TextField(blank=True, null=True)),
                ('other', models.TextField(blank=True, null=True)),
                ('wordingWarnings', models.TextField(blank=True, null=True)),
                ('regulation', models.TextField(blank=True, null=True)),
                ('regulatedBy', models.TextField(blank=True, null=True)),
                ('otherDirective', models.TextField(blank=True, null=True)),
                ('sccsOpinion', models.TextField(blank=True, null=True)),
                ('iupacName', models.TextField(blank=True, null=True)),
                ('ingredients', models.TextField(blank=True, null=True)),
                ('cmr', models.TextField(blank=True, null=True)),
                ('updateDate', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CommentsModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=400)),
                ('tagLine', models.CharField(max_length=4000)),
                ('youtube', models.CharField(blank=True, max_length=400)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='author', to=settings.AUTH_USER_MODEL)),
                ('commentedOnBrand', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='commentedOnBrand', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ingredientFunctionsModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=50, unique=True)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='ingredientsModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('referenceNumber', models.IntegerField(db_index=True, unique=True)),
                ('riskLevel', models.IntegerField(validators=[django.core.validators.MaxValueValidator(3), django.core.validators.MinValueValidator(1)])),
                ('name', models.TextField(db_index=True, unique=True)),
                ('casNumber', models.CharField(blank=True, db_index=True, max_length=20, null=True)),
                ('ecNumber', models.CharField(blank=True, db_index=True, max_length=20, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('restriction', models.CharField(blank=True, max_length=50, null=True)),
                ('cannotBeUsedUnderAge', models.IntegerField(default=0)),
                ('updateDate', models.CharField(blank=True, max_length=10, null=True)),
                ('functions', models.ManyToManyField(blank=True, db_index=True, related_name='function', to='modelsViews.ingredientFunctionsModel')),
            ],
        ),
        migrations.CreateModel(
            name='preservativesModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('referenceNumber', models.CharField(db_index=True, max_length=5, unique=True)),
                ('chemicalName', models.TextField(blank=True, null=True)),
                ('glossary', models.TextField(blank=True, null=True)),
                ('casNumber', models.TextField(blank=True, null=True)),
                ('ecNumber', models.TextField(blank=True, null=True)),
                ('productType', models.TextField(blank=True, null=True)),
                ('maxConcetration', models.TextField(blank=True, null=True)),
                ('other', models.TextField(blank=True, null=True)),
                ('wordingWarnings', models.TextField(blank=True, null=True)),
                ('regulation', models.TextField(blank=True, null=True)),
                ('regulatedBy', models.TextField(blank=True, null=True)),
                ('otherDirective', models.TextField(blank=True, null=True)),
                ('sccsOpinion', models.TextField(blank=True, null=True)),
                ('iupacName', models.TextField(blank=True, null=True)),
                ('ingredients', models.TextField(blank=True, null=True)),
                ('cmr', models.TextField(blank=True, null=True)),
                ('updateDate', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ProductsModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
                ('tagLine', models.CharField(max_length=400)),
                ('image', models.ImageField(blank=True, upload_to=modelsViews.models.scramble_uploaded_filename, verbose_name='Uploaded image')),
                ('thumbnail', models.ImageField(blank=True, upload_to='', verbose_name='Thumbnail of uploaded image')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('brand', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('ingredients', models.ManyToManyField(db_index=True, related_name='ingredient', to='modelsViews.ingredientsModel')),
            ],
        ),
        migrations.CreateModel(
            name='RankingModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('itemId', models.IntegerField()),
                ('type', models.CharField(max_length=1)),
                ('safety', models.IntegerField(validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(1)])),
                ('created_date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='restrictedSubstancesModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('referenceNumber', models.CharField(db_index=True, max_length=5, unique=True)),
                ('chemicalName', models.TextField(blank=True, null=True)),
                ('glossary', models.TextField(blank=True, null=True)),
                ('casNumber', models.TextField(blank=True, null=True)),
                ('ecNumber', models.TextField(blank=True, null=True)),
                ('productType', models.TextField(blank=True, null=True)),
                ('maxConcetration', models.TextField(blank=True, null=True)),
                ('other', models.TextField(blank=True, null=True)),
                ('wordingWarnings', models.TextField(blank=True, null=True)),
                ('regulation', models.TextField(blank=True, null=True)),
                ('regulatedBy', models.TextField(blank=True, null=True)),
                ('otherDirective', models.TextField(blank=True, null=True)),
                ('sccsOpinion', models.TextField(blank=True, null=True)),
                ('iupacName', models.TextField(blank=True, null=True)),
                ('ingredients', models.TextField(blank=True, null=True)),
                ('cmr', models.TextField(blank=True, null=True)),
                ('updateDate', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='UploadedImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to=modelsViews.models.scramble_uploaded_filename, verbose_name='Uploaded image')),
                ('thumbnail', models.ImageField(blank=True, upload_to='', verbose_name='Thumbnail of uploaded image')),
                ('title', models.CharField(default='Unknown Picture', max_length=255, verbose_name='Title of the uploaded image')),
                ('description', models.TextField(default='', verbose_name='Description of the uploaded image')),
            ],
        ),
        migrations.CreateModel(
            name='uvFiltersModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('referenceNumber', models.CharField(db_index=True, max_length=5, unique=True)),
                ('chemicalName', models.TextField(blank=True, null=True)),
                ('glossary', models.TextField(blank=True, null=True)),
                ('casNumber', models.TextField(blank=True, null=True)),
                ('ecNumber', models.TextField(blank=True, null=True)),
                ('productType', models.TextField(blank=True, null=True)),
                ('maxConcetration', models.TextField(blank=True, null=True)),
                ('other', models.TextField(blank=True, null=True)),
                ('wordingWarnings', models.TextField(blank=True, null=True)),
                ('regulation', models.TextField(blank=True, null=True)),
                ('regulatedBy', models.TextField(blank=True, null=True)),
                ('otherDirective', models.TextField(blank=True, null=True)),
                ('sccsOpinion', models.TextField(blank=True, null=True)),
                ('iupacName', models.TextField(blank=True, null=True)),
                ('ingredients', models.TextField(blank=True, null=True)),
                ('cmr', models.TextField(blank=True, null=True)),
                ('updateDate', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='warningsModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('referenceNumber', models.IntegerField(db_index=True, unique=True)),
                ('description', models.CharField(max_length=300)),
            ],
        ),
        migrations.AddField(
            model_name='ingredientsmodel',
            name='warnings',
            field=models.ManyToManyField(blank=True, related_name='warning', to='modelsViews.warningsModel'),
        ),
        migrations.AddField(
            model_name='commentsmodel',
            name='commentedOnProduct',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='commentedOnProduct', to='modelsViews.ProductsModel'),
        ),
    ]
